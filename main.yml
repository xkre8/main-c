- name: Infrastructure Setup
  # hosts: all
  hosts: localhost
  connection: local
  become: yes
  collections:
    - company.infrastructure

  # vars:
  #     users: "{{ users_yaml | from_yaml if users_yaml is defined and users_yaml != '' else [] }}"
  # vars:
  #   selected_disk_name: "sde"
  #   partition_strategy: "create_partition"
  #   split_disk: true
  #   split_disk_secondary: true        
  #   partition_size_gb: 5
  #   volume_group_name: "vg_web"
  #   volume_group2_name: "vg_spareweb"      
    
  #   # Primary VG Filesystem Configuration
  #   filesystem_config: |
  #     - path: "/var/www"
  #       size_mb: 2048
  #       fstype: "xfs"
  #     - path: "/opt/app"
  #       size_mb: 1024
  #       fstype: "ext4"
    
  #   # Secondary VG Filesystem Configuration
  #   filesystem_config2: |
  #     - path: "/data"
  #       size_mb: 3072
  #       fstype: "xfs"
  #     - path: "/backup"
  #       size_mb: 5024
  #       fstype: "ext4"
  pre_tasks:
    # 🔥 แปลง service_requests_yml → user_configs
    - name: Transform service requests to user configs
      ansible.builtin.set_fact:
        user_configs: "{{ flattened_users }}"
      vars:
        parsed_srs: "{{ service_requests_yml | from_yaml }}"
        flattened_users: >-
          {%- set result = [] -%}
          {%- for sr in parsed_srs -%}
            {%- for user in sr.users | default([]) -%}
              {%- set enhanced_user = user | combine({
                'name': user.username,
                'email': sr.email | default(''),
                'sr_number': sr.sr_number,
                'owner_name': sr.owner_name,
                'tel': sr.tel | default(''),
                'groups': user.additional_groups | default([]),
                'group': user.groupname | default('users')
              }) -%}
              {%- set _ = result.append(enhanced_user) -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ result }}
  

  tasks:
    # - name: Setup LVM Management
    #   ansible.builtin.include_role:
    #     name: company.infrastructure.lvm_management
        
    # - name: Setup Java Management
    #   ansible.builtin.include_role:
    #     name: company.infrastructure.java_management

    - name: Setup User Management
      ansible.builtin.include_role:
        name: company.infrastructure.user_management_v2

    - name: 🧩 Debug created users
      ansible.builtin.shell: |
        echo "=== USER CHECK REPORT ==="
        {% for u in users %}
        echo "👤 {{ u.username }}:"
        id {{ u.username }} 2>/dev/null || echo "⚠️  User not found"
        echo ""
        {% endfor %}
      register: user_check
      changed_when: false
    
    - name: 📋 Show user debug output
      ansible.builtin.debug:
        msg: "{{ user_check.stdout }}"


